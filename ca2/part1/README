# Technical Report: Build Tools with Gradle

###### Made by: [Andr√© Ferreira - 1101448]

## Table of Contents

- [Tutorial](#tutorial)
    - [Step 1: Download and Commit the Example Application](#step-1-download-and-commit-the-example-application)
    - [Step 2: Add a new Task to Run the Server](#step-2-add-a-new-task-to-run-the-server)
    - [Step 3: Add a Simple Unit Test](#step-3-add-a-simple-unit-test)
    - [Step 4: Add New Task of the type Copy](#step-4-add-a-new-task-of-the-type-copy)
    - [Step 5: Add a New Task of the type Zip](#step-5-add-a-new-task-of-the-type-zip)
    - [Step 6: Mark York Repository](#step-6-mark-york-repository)

### Tutorial

This provides a step-by-step tutorial on how to set up and use Gradle for various tasks in a Java application. These
tasks include downloading and committing an example application, adding a new task to run a server, adding a simple unit
test, creating tasks of the type Copy and Zip for backing up and zipping the source code respectively. Each step is
accompanied by the necessary commands to commit and push changes to the repository.

#### Step 1:  Download and Commit the Example Application

Open your terminal and navigate to the directory where you want to download the example application. Then, run the
following command to create a new directory and download the example application, in the end, commit the changes to the
local repository and close the issue #1:

- `mkdir ca2\part1 && cd ca2\part1`
- `git clone https://bitbucket.org/pssmatos/gradle_basic_demo.git`
- `git add .`
- `git commit -m "Initial Commit, close #1"`

#### Step 2:  Add a new Task to Run the Server

1. Open the `build.gradle` file in the root of the project and add the following code to the file:

    ```java
    // Task to run the server
    task runServer(type:JavaExec, dependsOn:classes) {
        group = "DevOps"
        description = "Launches a chat server that listens on port 59001"
    
        classpath = sourceSets.main.runtimeClasspath
    
        mainClass = 'basic_demo.ChatServerApp'
    
        args '59001'
    }
    ```
2. After adding the new task, you can run the server, and commit the changes by executing the following command in the
   terminal:
    - `.\radlew runServer`
    - `git add .`
    - `git commit -m "Add a new task to run the server, closes #2"`
    - `git push`

[Back to Top](#technical-report-build-tools-with-gradle)

#### Step 3:  Add a Simple Unit Test

1. Before adding the new test, you need to add the `junit` dependency to the `build.gradle` file. Open
   the `build.gradle` file in the root of the project and add the following code to the file:

      ```java 
      dependencies {
        testImplementation 'junit:junit:4.12'
      }
      ```

2. Create the new file for testing the server in the `src/test/java/basic_demo` directory and add the following code to
   the file:

      ```java
      /*
       * This Java source file was generated by the Gradle 'init' task.
       */
      package basic_demo;
      
      import org.junit.Test;
      
      import static org.junit.Assert.*;
      
      public class AppTest {
          @Test
          public void testAppHasAGreeting() {
              App classUnderTest = new App();
              assertNotNull("app should have a greeting", classUnderTest.getGreeting());
          }
      }
      ```
3. After adding the new test, you can run the test, and commit the changes by executing the following command in the
   terminal:

    - `.\radlew test`
    - `git add .`
    - `git commit -m "Add a simple unit test, closes #3"`
    - `git push`

[Back to Top](#technical-report-build-tools-with-gradle)

#### Step 4:  Add a New Task of the type Copy

1. Open the `build.gradle` file in the root of the project and add the following code to the file to create a new task
   of the type `Copy`:

    ```java
            // Task to create a backup
        task backup(type: Copy) {
        group = "DevOps"
        description = "Copies the source code to a backup directory"
        
            from 'src'
            into 'backup'} 
     ```
2. After adding the new task, you can run the task, and commit the changes by executing the following command in the
   terminal:
    - `.\radlew backup`
    - `git add .`
    - `git commit -m "Add a new task of the type Copy, closes #4"`
    - `git push`

[Back to Top](#technical-report-build-tools-with-gradle)

#### Step 5:  Add a New Task of the type Zip

1. Open the `build.gradle` file in the root of the project and add the following code to the file to create a new task
   of the type `Zip`:

   ```java
    // Task to zip the source code
   task zipSource(type: Zip) {
   group = "DevOps"
   description = "Zips the source code"
   
       from 'src'
       archiveFileName = 'source.zip'
       destinationDir(file('zip'))}
   ```

2. After adding the new task, you can run the task, and commit the changes by executing the following command in the
   terminal:
    - `.\radlew zip`
    - `git add .`
    - `git commit -m "Add a new task of the type Zip, closes #5"`
    - `git push`

[Back to Top](#technical-report-build-tools-with-gradle)

#### Step 6:  Mark York Repository

Open the terminal and use the following command to mark the repository with the tag `ca2-part1`:

- `git tag ca2-part1`
- `git push --tags`
- `git push origin main`

[Back to Top](#technical-report-build-tools-with-gradle)

# END OF README

```
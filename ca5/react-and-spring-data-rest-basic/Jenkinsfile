pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'docker-credentials'
        DOCKER_IMAGE = "1101448/jenkins-image"
        DOCKER_REGISTRY = "https://index.docker.io/v1/"
        GIT_CREDENTIALS_ID = 'aferreira101-GitHub-Credentials'
        REPO_URL = 'https://github.com/aferreira101/devops-23-24-JPE-PSM-1101448'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out...'
                git credentialsId: env.GIT_CREDENTIALS_ID, url: env.REPO_URL
            }
        }
        stage('Assemble') {
            steps {
                echo 'Assembling...'
                sh './gradlew assemble'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing...'
                sh './gradlew test'
                junit '**/build/test-results/test/*.xml'
            }
        }
        stage('Javadoc') {
            steps {
                echo 'Generating Javadoc...'
                sh './gradlew javadoc'
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'build/docs/javadoc', reportFiles: 'index.html', reportName: 'Javadoc'])
            }
        }
        stage('Archive') {
            steps {
                echo 'Archiving...'
                archiveArtifacts artifacts: 'build/libs/*.jar', allowEmptyArchive: true
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker Image...'
                    def app = docker.build("${env.DOCKER_IMAGE}:${env.BUILD_ID}")
                    docker.withRegistry(env.DOCKER_REGISTRY, env.DOCKER_CREDENTIALS_ID) {
                        app.push()
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
